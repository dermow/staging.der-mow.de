---
layout: post
title:  "Terraform 01 - Übersicht"
date:   2022-10-11 10:00:42 +0100
categories: Ansible
---

Moin,

Nach langer Pause möchte ich nun mal wieder eine kleine Artikel-Reihe starten, die sich um Terraform drehen soll. Zunächst mal kurz: was ist Terraform eigentlich?

Mit Hilfe von terraform können wir (Cloud-)Infrastrukturen mit Code (Infrastructure as Code) beschreiben und diese erzeugen und verwalten. Terraform setzt dabei auf seine eigene Beschreibungssprache HCL (Hashicorp Configuration Language). Grob zusammengefasst beschreiben wir unsere Ziel-Umgebung mit HCL und terraform nutzt dann die verschiedensten Cloud-APIs um die Ressoucen zu erstellen bzw. zu verwalten.

Bevor wir in den nächsten Artikeln weiter darauf eingehen, möchte ich kurz die wichtigsten Begrifflichkeiten erläutern.

<!-- excerpt-end -->

**State**: 
Im Gegensatz zu z.B Ansible, welches ohne vorheriges Wissen auf die Infrastruktur losgeht, "merkt" sich Terraform den aktuellen Zusaten der selbst verwalteten Ressourcen in seinem State, der lokal auf der Festplatte, in einem S3-Bucket - oder auf vielen weiteren Providern gespeichert werden kann.

**Backend**:
Die Terraform Backend-Konfiguration. Hauptsächlich die Konfiguration des States.

**Provider**:
Ein Provider ist sozusagen ein "Plugin" mit dem Terraform in die Lage versetzt wird mit den verschiedenen Cloud APIs zu sprechen. Provider gibt es z.B für AWS, Microsoft Azure, Google Cloud Platform - aber auch für Klassische Umgebungen wie VMWare. Eine Liste aller integrierter Provider findet sich hier:
https://registry.terraform.io/browse/providers

**Ressource**:
Eine Ressource ist ein Objekt, welches von Terraform verwaltet - bzw. erstellt werden soll. 

**Datasource**:
Eine Datasource ist eine bestehende Ressource, außerhalt des aktuellen Terraform-State - auf die wir dynamisch zugreifen möchten. Dies ist zum Beispiel hilfreich, wenn wir Subnet-IDs in einer Cloud benötigen, die Subnets aber nicht selbst anlegen. 

**Modul**:
Ein Modul ist in Terraform eine zusammenhängende Einheit an HCL-Code. In einem Terrafrom-Projekt existiert immer das Root-Modul. wir können aber auch wiederverwendbare Module wie z.B. "aws-webserver" oder ähnliches erstellen und diese in beliebig vielen weiteren Projekten parametrisiert nutzen.
